// @HEADER
//
// ***********************************************************************
//
//             Xpetra: A linear algebra interface package
//                  Copyright 2012 Sandia Corporation
//
// Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
// the U.S. Government retains certain rights in this software.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the Corporation nor the names of the
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Questions? Contact
//                    Jonathan Hu       (jhu@sandia.gov)
//                    Andrey Prokopenko (aprokop@sandia.gov)
//                    Ray Tuminaro      (rstumin@sandia.gov)
//
// ***********************************************************************
//
// @HEADER
#ifndef XPETRA_TPETRAMAP_DECL_HPP
#define XPETRA_TPETRAMAP_DECL_HPP

/* this file is automatically generated - do not edit (see script/tpetra.py) */

#include "Xpetra_TpetraConfigDefs.hpp"

#include <Tpetra_Map.hpp>

#include "Xpetra_Map_decl.hpp"
#include "Xpetra_Utils.hpp"

#include "Xpetra_Exceptions.hpp"

namespace Xpetra {

#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
  template <class LocalOrdinal, class GlobalOrdinal, class Node>
 const RCP<Map<LocalOrdinal,GlobalOrdinal,Node> > toXpetraNonConst(const RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> >& map);
#else
  template <class Node>
 const RCP<Map<Node> > toXpetraNonConst(const RCP<const Tpetra::Map<Node> >& map);
#endif

#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
  template <class LocalOrdinal,
            class GlobalOrdinal,
            class Node = KokkosClassic::DefaultNode::DefaultNodeType>
#else
  template <class Node = KokkosClassic::DefaultNode::DefaultNodeType>
#endif
  class TpetraMap
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    : public virtual Map<LocalOrdinal,GlobalOrdinal,Node> {
#else
    : public virtual Map<Node> {
#endif

  public:

#ifndef TPETRA_ENABLE_TEMPLATE_ORDINALS
    using LocalOrdinal = typename Tpetra::Map<>::local_ordinal_type;
    using GlobalOrdinal = typename Tpetra::Map<>::global_ordinal_type;
#endif
    //! @name Constructors and destructor
    //@{


    //! Constructor with Tpetra-defined contiguous uniform distribution.


    TpetraMap (global_size_t numGlobalElements,
               GlobalOrdinal indexBase,
               const Teuchos::RCP< const Teuchos::Comm< int > > &comm,
               LocalGlobal lg=GloballyDistributed);


    //! Constructor with a user-defined contiguous distribution.


    TpetraMap (global_size_t numGlobalElements,
               size_t numLocalElements,
               GlobalOrdinal indexBase,
               const Teuchos::RCP< const Teuchos::Comm< int > > &comm);


    //! Constructor with user-defined arbitrary (possibly noncontiguous) distribution.


    TpetraMap (global_size_t numGlobalElements,
               const Teuchos::ArrayView< const GlobalOrdinal > &elementList,
               GlobalOrdinal indexBase,
               const Teuchos::RCP< const Teuchos::Comm< int > > &comm);


#ifdef HAVE_XPETRA_KOKKOS_REFACTOR
#ifdef HAVE_XPETRA_TPETRA
    //! Constructor with user-defined arbitrary (possibly noncontiguous) distribution passed as a Kokkos::View.
    TpetraMap (global_size_t numGlobalElements,
               const Kokkos::View<const GlobalOrdinal*, typename Node::device_type>& indexList,
               GlobalOrdinal indexBase,
               const Teuchos::RCP< const Teuchos::Comm< int > > &comm);
#endif
#endif

    //! Destructor
    ~TpetraMap();


    //! @name Attributes
    //@{

    //! The number of elements in this Map.
    global_size_t getGlobalNumElements() const;

    //! The number of elements belonging to the calling node.
    size_t getNodeNumElements() const;

    //! The index base for this Map.
    GlobalOrdinal getIndexBase() const;

    //! The minimum local index.
    LocalOrdinal getMinLocalIndex() const;

    //! The maximum local index on the calling process.
    LocalOrdinal getMaxLocalIndex() const;

    //! The minimum global index owned by the calling process.
    GlobalOrdinal getMinGlobalIndex() const;

    //! The maximum global index owned by the calling process.
    GlobalOrdinal getMaxGlobalIndex() const;

    //! The minimum global index over all processes in the communicator.
    GlobalOrdinal getMinAllGlobalIndex() const;

    //! The maximum global index over all processes in the communicator.
    GlobalOrdinal getMaxAllGlobalIndex() const;

    //! The local index corresponding to the given global index.
    LocalOrdinal getLocalElement(GlobalOrdinal globalIndex) const;

    //! The global index corresponding to the given local index.
    GlobalOrdinal getGlobalElement(LocalOrdinal localIndex) const;

    //! Return the process IDs and corresponding local IDs for the given global IDs.
    LookupStatus getRemoteIndexList(const Teuchos::ArrayView< const GlobalOrdinal > &GIDList, const Teuchos::ArrayView< int > &nodeIDList, const Teuchos::ArrayView< LocalOrdinal > &LIDList) const;

    //! Return the process IDs for the given global IDs.
    LookupStatus getRemoteIndexList(const Teuchos::ArrayView< const GlobalOrdinal > &GIDList, const Teuchos::ArrayView< int > &nodeIDList) const;

    //! Return a view of the global indices owned by this node.
    Teuchos::ArrayView< const GlobalOrdinal > getNodeElementList() const;

    //@}

    //! @name Boolean tests
    //@{

    //! True if the local index is valid for this Map on this node, else false.
    bool isNodeLocalElement(LocalOrdinal localIndex) const;

    //! True if the global index is found in this Map on this node, else false.
    bool isNodeGlobalElement(GlobalOrdinal globalIndex) const;

    //! True if this Map is distributed contiguously, else false.
    bool isContiguous() const;

    //! Whether this Map is globally distributed or locally replicated.
    bool isDistributed() const;

    //! True if and only if map is compatible with this Map.
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    bool isCompatible(const Map< LocalOrdinal, GlobalOrdinal, Node > &map) const;
#else
    bool isCompatible(const Map<Node > &map) const;
#endif

    //! True if and only if map is identical to this Map.
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    bool isSameAs(const Map< LocalOrdinal, GlobalOrdinal, Node > &map) const;
#else
    bool isSameAs(const Map<Node > &map) const;
#endif

    //@}

    //! @name
    //@{

    //! Get this Map's Comm object.
    Teuchos::RCP< const Teuchos::Comm< int > >  getComm() const;


    //@}

    //! @name
    //@{

    //! Return a simple one-line description of this object.
    std::string description() const;

    //! Print this object with the given verbosity level to the given FancyOStream.
    void describe(Teuchos::FancyOStream &out, const Teuchos::EVerbosityLevel verbLevel=Teuchos::Describable::verbLevel_default) const;

#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    RCP<const Map<LocalOrdinal, GlobalOrdinal, Node> > removeEmptyProcesses () const;
    RCP<const Map<LocalOrdinal, GlobalOrdinal, Node> > replaceCommWithSubset (const Teuchos::RCP<const Teuchos::Comm<int> >& newComm) const;
#else
    RCP<const Map<Node> > removeEmptyProcesses () const;
    RCP<const Map<Node> > replaceCommWithSubset (const Teuchos::RCP<const Teuchos::Comm<int> >& newComm) const;
#endif

//@}

    //! @name Xpetra specific
    //@{

    //! TpetraMap constructor to wrap a Tpetra::Map object
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    TpetraMap(const Teuchos::RCP<const Tpetra::Map<LocalOrdinal, GlobalOrdinal, Node > > &map);
#else
    TpetraMap(const Teuchos::RCP<const Tpetra::Map<Node > > &map);
#endif

    //! Get the library used by this object (Tpetra or Epetra?)    
    UnderlyingLib lib() const;

    //! Get the underlying Tpetra map
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    RCP< const Tpetra::Map< LocalOrdinal, GlobalOrdinal, Node > > getTpetra_Map() const;
#else
    RCP< const Tpetra::Map<Node > > getTpetra_Map() const;
#endif

#ifdef HAVE_XPETRA_KOKKOS_REFACTOR
#ifdef HAVE_XPETRA_TPETRA
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    using local_map_type = typename Map<LocalOrdinal, GlobalOrdinal, Node>::local_map_type;
#else
    using local_map_type = typename Map<Node>::local_map_type;
#endif
    /// \brief Get the local Map for Kokkos kernels.
    local_map_type getLocalMap () const;
#endif
#endif

    //@}

  protected:

#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    RCP< const Tpetra::Map< LocalOrdinal, GlobalOrdinal, Node > > map_;
#else
    RCP< const Tpetra::Map<Node > > map_;
#endif

  }; // TpetraMap class


#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
  template <class LocalOrdinal, class GlobalOrdinal, class Node>
  const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> & toTpetra(const Map<LocalOrdinal,GlobalOrdinal,Node> &map) {
#else
  template <class Node>
  const Tpetra::Map<Node> & toTpetra(const Map<Node> &map) {
#endif
    // TODO: throw exception
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    const TpetraMap<LocalOrdinal,GlobalOrdinal,Node> & tpetraMap = dynamic_cast<const TpetraMap<LocalOrdinal,GlobalOrdinal,Node> &>(*map.getMap());
#else
    const TpetraMap<Node> & tpetraMap = dynamic_cast<const TpetraMap<Node> &>(*map.getMap());
#endif
    return *tpetraMap.getTpetra_Map();
  }

#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
  template <class LocalOrdinal, class GlobalOrdinal, class Node>
  const RCP< const Tpetra::Map< LocalOrdinal, GlobalOrdinal, Node > > toTpetra(const RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > > &map) {
    typedef TpetraMap<LocalOrdinal, GlobalOrdinal, Node> TpetraMapClass;
#else
  template <class Node>
  const RCP< const Tpetra::Map<Node > > toTpetra(const RCP< const Map<Node > > &map) {
    typedef TpetraMap<Node> TpetraMapClass;
#endif
    if (map != Teuchos::null) {
      XPETRA_RCP_DYNAMIC_CAST(const TpetraMapClass, map->getMap(), tpetraMap, "toTpetra");
      return tpetraMap->getTpetra_Map();
    }
    return Teuchos::null;
  }

  // In some cases (for instance, in MueLu adapter to Tpetra operator), we need to return a reference. This is only possible if
  // we assume that the map argument is nonzero
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
  template <class LocalOrdinal, class GlobalOrdinal, class Node>
  const RCP< const Tpetra::Map< LocalOrdinal, GlobalOrdinal, Node > > toTpetraNonZero(const RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > > &map) {
#else
  template <class Node>
  const RCP< const Tpetra::Map<Node > > toTpetraNonZero(const RCP< const Map<Node > > &map) {
#endif
    TEUCHOS_TEST_FOR_EXCEPTION(map.is_null(), std::invalid_argument, "map must be nonzero");
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    typedef TpetraMap<LocalOrdinal, GlobalOrdinal, Node> TpetraMapClass;
#else
    typedef TpetraMap<Node> TpetraMapClass;
#endif
    XPETRA_RCP_DYNAMIC_CAST(const TpetraMapClass, map->getMap(), tpetraMap, "toTpetra");
    return tpetraMap->getTpetra_Map();
  }

#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
  template <class LocalOrdinal, class GlobalOrdinal, class Node>
  const RCP<const Map<LocalOrdinal,GlobalOrdinal,Node> > toXpetra(const RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> >& map) {
#else
  template <class Node>
  const RCP<const Map<Node> > toXpetra(const RCP<const Tpetra::Map<Node> >& map) {
#endif
    if (!map.is_null())
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
      return rcp(new TpetraMap<LocalOrdinal, GlobalOrdinal, Node>(map));
#else
      return rcp(new TpetraMap<Node>(map));
#endif

    return Teuchos::null;
  }

#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
  template <class LocalOrdinal, class GlobalOrdinal, class Node>
  const RCP<Map<LocalOrdinal,GlobalOrdinal,Node> > toXpetraNonConst(const RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> >& map) {
#else
  template <class Node>
  const RCP<Map<Node> > toXpetraNonConst(const RCP<const Tpetra::Map<Node> >& map) {
#endif
    if (!map.is_null())
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
      return rcp(new TpetraMap<LocalOrdinal,GlobalOrdinal,Node>(map));
#else
      return rcp(new TpetraMap<Node>(map));
#endif

    return Teuchos::null;
  }


  namespace useTpetra {

    //! Non-member function to create a locally replicated Map with a specified node.
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    template <class LocalOrdinal, class GlobalOrdinal, class Node>
    Teuchos::RCP< const TpetraMap<LocalOrdinal,GlobalOrdinal,Node> >
#else
    template <class Node>
    Teuchos::RCP< const TpetraMap<Node> >
#endif
    createLocalMapWithNode(size_t numElements, const Teuchos::RCP< const Teuchos::Comm< int > > &comm)
    {
      XPETRA_MONITOR("useTpetra::createLocalMapWithNode");

#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
      return rcp(new TpetraMap<LocalOrdinal,GlobalOrdinal,Node>(Tpetra::createLocalMapWithNode<LocalOrdinal,GlobalOrdinal,Node>(numElements, comm)));
#else
      return rcp(new TpetraMap<Node>(Tpetra::createLocalMapWithNode<Node>(numElements, comm)));
#endif
    }

    //! Non-member function to create a (potentially) non-uniform, contiguous Map with the default node.
    template <class LocalOrdinal, class GlobalOrdinal>
    Teuchos::RCP< const TpetraMap<LocalOrdinal,GlobalOrdinal, typename Tpetra::Map<>::node_type> >
    createContigMap(global_size_t numElements, size_t localNumElements, const Teuchos::RCP< const Teuchos::Comm< int > > &comm) {
      XPETRA_MONITOR("useTpetra::createContigMap");

      return rcp(new TpetraMap<LocalOrdinal,GlobalOrdinal, typename Tpetra::Map<>::node_type>(Tpetra::createContigMap<LocalOrdinal,GlobalOrdinal, typename Tpetra::Map<>::node_type>(numElements, localNumElements, comm)));
    }

    //! Non-member function to create a (potentially) non-uniform, contiguous Map with a user-specified node.
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    template <class LocalOrdinal, class GlobalOrdinal, class Node>
    Teuchos::RCP< const TpetraMap<LocalOrdinal,GlobalOrdinal,Node> >
#else
    template <class Node>
    Teuchos::RCP< const TpetraMap<Node> >
#endif
    createContigMapWithNode(global_size_t numElements, size_t localNumElements,
                            const Teuchos::RCP< const Teuchos::Comm< int > > &comm)
    {
      XPETRA_MONITOR("useTpetra::createContigMap");
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
      return rcp(new TpetraMap<LocalOrdinal,GlobalOrdinal,Node>(Tpetra::createContigMapWithNode<LocalOrdinal,GlobalOrdinal,Node>(numElements, localNumElements, comm)));
#else
      return rcp(new TpetraMap<Node>(Tpetra::createContigMapWithNode<Node>(numElements, localNumElements, comm)));
#endif
    }
  } // useTpetra namespace

#define XPETRA_TPETRAMAP_SHORT
} // Xpetra namespace
#endif // XPETRA_TPETRAMAP_DECL_HPP

