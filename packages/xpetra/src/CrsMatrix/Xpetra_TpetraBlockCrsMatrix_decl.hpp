// @HEADER
//
// ***********************************************************************
//
//             Xpetra: A linear algebra interface package
//                  Copyright 2012 Sandia Corporation
//
// Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
// the U.S. Government retains certain rights in this software.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the Corporation nor the names of the
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Questions? Contact
//                    Jonathan Hu       (jhu@sandia.gov)
//                    Andrey Prokopenko (aprokop@sandia.gov)
//                    Ray Tuminaro      (rstumin@sandia.gov)
//
// ***********************************************************************
//
// @HEADER
#ifndef XPETRA_TPETRABLOCKCRSMATRIX_DECL_HPP
#define XPETRA_TPETRABLOCKCRSMATRIX_DECL_HPP

/* this file is automatically generated - do not edit (see script/tpetra.py) */

#include "Xpetra_TpetraConfigDefs.hpp"

#include "Tpetra_BlockCrsMatrix.hpp"
#include "Tpetra_CrsMatrix.hpp"

#include "Xpetra_CrsMatrix.hpp"
#include "Xpetra_TpetraMap_decl.hpp"
#include "Xpetra_TpetraMultiVector_decl.hpp"
#include "Xpetra_TpetraVector_decl.hpp"
#include "Xpetra_TpetraCrsGraph_decl.hpp"
#include "Xpetra_Exceptions.hpp"


namespace Xpetra {

#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
  template <class Scalar, class LocalOrdinal, class GlobalOrdinal, class Node = KokkosClassic::DefaultNode::DefaultNodeType>
#else
  template <class Scalar, class Node = KokkosClassic::DefaultNode::DefaultNodeType>
#endif
  class TpetraBlockCrsMatrix
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    : public CrsMatrix<Scalar,LocalOrdinal,GlobalOrdinal,Node>//, public TpetraRowMatrix<Scalar,LocalOrdinal,GlobalOrdinal,Node>
#else
    : public CrsMatrix<Scalar,Node>//, public TpetraRowMatrix<Scalar,LocalOrdinal,GlobalOrdinal,Node>
#endif
  {

#ifndef TPETRA_ENABLE_TEMPLATE_ORDINALS
    using LocalOrdinal = typename Tpetra::Map<>::local_ordinal_type;
    using GlobalOrdinal = typename Tpetra::Map<>::global_ordinal_type;
#endif
    // The following typedef are used by the XPETRA_DYNAMIC_CAST() macro.
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    typedef TpetraBlockCrsMatrix<Scalar,LocalOrdinal,GlobalOrdinal,Node> TpetraBlockCrsMatrixClass;
    typedef TpetraVector<Scalar,LocalOrdinal,GlobalOrdinal,Node> TpetraVectorClass;
    typedef TpetraImport<LocalOrdinal,GlobalOrdinal,Node> TpetraImportClass;
    typedef TpetraExport<LocalOrdinal,GlobalOrdinal,Node> TpetraExportClass;
#else
    typedef TpetraBlockCrsMatrix<Scalar,Node> TpetraBlockCrsMatrixClass;
    typedef TpetraVector<Scalar,Node> TpetraVectorClass;
    typedef TpetraImport<Node> TpetraImportClass;
    typedef TpetraExport<Node> TpetraExportClass;
#endif

  public:

    //! @name Constructor/Destructor Methods

    //! Constructor specifying fixed number of entries for each row (not implemented)
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    TpetraBlockCrsMatrix(const  Teuchos::RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > > &rowMap, 
#else
    TpetraBlockCrsMatrix(const  Teuchos::RCP< const Map<Node > > &rowMap, 
#endif
                         size_t maxNumEntriesPerRow, 
                         const Teuchos::RCP< Teuchos::ParameterList > &params=Teuchos::null);


    //! Constructor specifying (possibly different) number of entries in each row (not implemented)
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    TpetraBlockCrsMatrix(const Teuchos::RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > > &rowMap, 
#else
    TpetraBlockCrsMatrix(const Teuchos::RCP< const Map<Node > > &rowMap, 
#endif
                         const ArrayRCP< const size_t > &NumEntriesPerRowToAlloc, 
                         const Teuchos::RCP< Teuchos::ParameterList > &params=Teuchos::null);


    //! Constructor specifying column Map and fixed number of entries for each row (not implemented)
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    TpetraBlockCrsMatrix(const Teuchos::RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > > &rowMap, 
                         const Teuchos::RCP< const  Map< LocalOrdinal, GlobalOrdinal, Node > > &colMap, 
#else
    TpetraBlockCrsMatrix(const Teuchos::RCP< const Map<Node > > &rowMap, 
                         const Teuchos::RCP< const  Map<Node > > &colMap, 
#endif
                         size_t maxNumEntriesPerRow, 
                         const Teuchos::RCP< Teuchos::ParameterList > &params=Teuchos::null);


    //! Constructor specifying column Map and number of entries in each row (not implemented)
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    TpetraBlockCrsMatrix(const Teuchos::RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > > &rowMap, 
                         const Teuchos::RCP< const  Map< LocalOrdinal, GlobalOrdinal, Node > > &colMap, 
#else
    TpetraBlockCrsMatrix(const Teuchos::RCP< const Map<Node > > &rowMap, 
                         const Teuchos::RCP< const  Map<Node > > &colMap, 
#endif
                         const ArrayRCP< const size_t > &NumEntriesPerRowToAlloc, 
                         const Teuchos::RCP< Teuchos::ParameterList > &params=Teuchos::null);


    //! Constructor specifying a previously constructed graph ( not implemented )
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    TpetraBlockCrsMatrix(const Teuchos::RCP< const CrsGraph< LocalOrdinal, GlobalOrdinal, Node> > &graph, 
#else
    TpetraBlockCrsMatrix(const Teuchos::RCP< const CrsGraph<Node> > &graph, 
#endif
                         const Teuchos::RCP< Teuchos::ParameterList > &params=Teuchos::null);


    //! Constructor specifying a previously constructed graph & blocksize
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    TpetraBlockCrsMatrix(const Teuchos::RCP< const CrsGraph< LocalOrdinal, GlobalOrdinal, Node> > &graph, 
#else
    TpetraBlockCrsMatrix(const Teuchos::RCP< const CrsGraph<Node> > &graph, 
#endif
                         const LocalOrdinal blockSize);


    //! Constructor for a fused import ( not implemented )
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    TpetraBlockCrsMatrix(const Teuchos::RCP<const Tpetra::BlockCrsMatrix<Scalar,LocalOrdinal,GlobalOrdinal,Node> >& sourceMatrix,
                         const Import<LocalOrdinal,GlobalOrdinal,Node> & importer,
                         const Teuchos::RCP<const Map<LocalOrdinal,GlobalOrdinal,Node> >& domainMap = Teuchos::null,
                         const Teuchos::RCP<const Map<LocalOrdinal,GlobalOrdinal,Node> >& rangeMap = Teuchos::null,
#else
    TpetraBlockCrsMatrix(const Teuchos::RCP<const Tpetra::BlockCrsMatrix<Scalar,Node> >& sourceMatrix,
                         const Import<Node> & importer,
                         const Teuchos::RCP<const Map<Node> >& domainMap = Teuchos::null,
                         const Teuchos::RCP<const Map<Node> >& rangeMap = Teuchos::null,
#endif
                         const Teuchos::RCP<Teuchos::ParameterList>& params = Teuchos::null);


    //! Constructor for a fused export ( not implemented )
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    TpetraBlockCrsMatrix(const Teuchos::RCP<const Tpetra::BlockCrsMatrix<Scalar,LocalOrdinal,GlobalOrdinal,Node> >& sourceMatrix,
                         const Export<LocalOrdinal,GlobalOrdinal,Node> & exporter,
                         const Teuchos::RCP<const Map<LocalOrdinal,GlobalOrdinal,Node> >& domainMap = Teuchos::null,
                         const Teuchos::RCP<const Map<LocalOrdinal,GlobalOrdinal,Node> >& rangeMap = Teuchos::null,
#else
    TpetraBlockCrsMatrix(const Teuchos::RCP<const Tpetra::BlockCrsMatrix<Scalar,Node> >& sourceMatrix,
                         const Export<Node> & exporter,
                         const Teuchos::RCP<const Map<Node> >& domainMap = Teuchos::null,
                         const Teuchos::RCP<const Map<Node> >& rangeMap = Teuchos::null,
#endif
                         const Teuchos::RCP<Teuchos::ParameterList>& params = Teuchos::null);


    //! Constructor for a fused import ( not implemented )
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    TpetraBlockCrsMatrix(const Teuchos::RCP<const Tpetra::BlockCrsMatrix<Scalar,LocalOrdinal,GlobalOrdinal,Node> >& sourceMatrix,
                         const Import<LocalOrdinal,GlobalOrdinal,Node> & RowImporter,
                         const Teuchos::RCP<const Import<LocalOrdinal,GlobalOrdinal,Node> > DomainImporter,
                         const Teuchos::RCP<const Map<LocalOrdinal,GlobalOrdinal,Node> >& domainMap,
                         const Teuchos::RCP<const Map<LocalOrdinal,GlobalOrdinal,Node> >& rangeMap,
#else
    TpetraBlockCrsMatrix(const Teuchos::RCP<const Tpetra::BlockCrsMatrix<Scalar,Node> >& sourceMatrix,
                         const Import<Node> & RowImporter,
                         const Teuchos::RCP<const Import<Node> > DomainImporter,
                         const Teuchos::RCP<const Map<Node> >& domainMap,
                         const Teuchos::RCP<const Map<Node> >& rangeMap,
#endif
                         const Teuchos::RCP<Teuchos::ParameterList>& params);


    //! Constructor for a fused export ( not implemented )
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    TpetraBlockCrsMatrix(const Teuchos::RCP<const Tpetra::BlockCrsMatrix<Scalar,LocalOrdinal,GlobalOrdinal,Node> >& sourceMatrix,
                         const Export<LocalOrdinal,GlobalOrdinal,Node> & RowExporter,
                         const Teuchos::RCP<const Export<LocalOrdinal,GlobalOrdinal,Node> > DomainExporter,
                         const Teuchos::RCP<const Map<LocalOrdinal,GlobalOrdinal,Node> >& domainMap,
                         const Teuchos::RCP<const Map<LocalOrdinal,GlobalOrdinal,Node> >& rangeMap,
#else
    TpetraBlockCrsMatrix(const Teuchos::RCP<const Tpetra::BlockCrsMatrix<Scalar,Node> >& sourceMatrix,
                         const Export<Node> & RowExporter,
                         const Teuchos::RCP<const Export<Node> > DomainExporter,
                         const Teuchos::RCP<const Map<Node> >& domainMap,
                         const Teuchos::RCP<const Map<Node> >& rangeMap,
#endif
                         const Teuchos::RCP<Teuchos::ParameterList>& params);

    //! Destructor.
    virtual ~TpetraBlockCrsMatrix();




    //! @name Insertion/Removal Methods


    //! Insert matrix entries, using global IDs (not implemented)    
    void insertGlobalValues(GlobalOrdinal globalRow, 
                            const ArrayView< const GlobalOrdinal > &cols, 
                            const ArrayView< const Scalar > &vals);


    //! Insert matrix entries, using local IDs (not implemented)
    void insertLocalValues(LocalOrdinal localRow, 
                           const ArrayView< const LocalOrdinal > &cols, 
                           const ArrayView< const Scalar > &vals);

    //! Replace matrix entries, using global IDs (not implemented)
    void replaceGlobalValues(GlobalOrdinal globalRow, 
                            const ArrayView< const GlobalOrdinal > &cols, 
                            const ArrayView< const Scalar > &vals);


    //! Replace matrix entries, using local IDs.
    void replaceLocalValues (LocalOrdinal localRow,
                             const ArrayView<const LocalOrdinal> &cols,
                             const ArrayView<const Scalar> &vals);

    //! Set all matrix entries equal to scalarThis.
    void setAllToScalar(const Scalar &alpha);

    //! Scale the current values of a matrix, this = alpha*this (not implemented)
    void scale(const Scalar &alpha);

    //! Allocates and returns ArrayRCPs of the Crs arrays --- This is an Xpetra-only routine.
    //** \warning This is an expert-only routine and should not be called from user code. (not implemented)
    void allocateAllValues(size_t numNonZeros,ArrayRCP<size_t> & rowptr, 
                           ArrayRCP<LocalOrdinal> & colind, 
                           ArrayRCP<Scalar> & values);

    //! Sets the 1D pointer arrays of the graph (not impelmented)
    void setAllValues(const ArrayRCP<size_t> & rowptr, 
                      const ArrayRCP<LocalOrdinal> & colind, 
                      const ArrayRCP<Scalar> & values);

    //! Gets the 1D pointer arrays of the graph (not implemented)
    void getAllValues(ArrayRCP<const size_t>& rowptr, 
                      ArrayRCP<const LocalOrdinal>& colind, 
                      ArrayRCP<const Scalar>& values)  const;


    //! @name Transformational Methods

    //!
    void resumeFill(const RCP< ParameterList > &params=null);

    //! Signal that data entry is complete, specifying domain and range maps.
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    void fillComplete(const RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > > &domainMap, 
                      const RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > > &rangeMap, const RCP< ParameterList > &params=null);
#else
    void fillComplete(const RCP< const Map<Node > > &domainMap, 
                      const RCP< const Map<Node > > &rangeMap, const RCP< ParameterList > &params=null);
#endif

    //! Signal that data entry is complete.
    void fillComplete(const RCP< ParameterList > &params=null);


    //!  Replaces the current domainMap and importer with the user-specified objects.
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    void replaceDomainMapAndImporter(const Teuchos::RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > >& newDomainMap, 
                                     Teuchos::RCP<const Import<LocalOrdinal,GlobalOrdinal,Node> >  & newImporter);
#else
    void replaceDomainMapAndImporter(const Teuchos::RCP< const Map<Node > >& newDomainMap, 
                                     Teuchos::RCP<const Import<Node> >  & newImporter);
#endif

    //! Expert static fill complete
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    void expertStaticFillComplete(const RCP<const Map<LocalOrdinal,GlobalOrdinal,Node> > & domainMap,
                                  const RCP<const Map<LocalOrdinal,GlobalOrdinal,Node> > & rangeMap,
                                  const RCP<const Import<LocalOrdinal,GlobalOrdinal,Node> > &importer=Teuchos::null,
                                  const RCP<const Export<LocalOrdinal,GlobalOrdinal,Node> > &exporter=Teuchos::null,
#else
    void expertStaticFillComplete(const RCP<const Map<Node> > & domainMap,
                                  const RCP<const Map<Node> > & rangeMap,
                                  const RCP<const Import<Node> > &importer=Teuchos::null,
                                  const RCP<const Export<Node> > &exporter=Teuchos::null,
#endif
                                  const RCP<ParameterList> &params=Teuchos::null);    


    //! @name Methods implementing RowMatrix

    //! Returns the Map that describes the row distribution in this matrix.
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    const RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > >  getRowMap() const;
#else
    const RCP< const Map<Node > >  getRowMap() const;
#endif

    //! Returns the Map that describes the column distribution in this matrix.
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    const RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > >  getColMap() const;
#else
    const RCP< const Map<Node > >  getColMap() const;
#endif

    //! Returns the CrsGraph associated with this matrix.
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    RCP< const CrsGraph< LocalOrdinal, GlobalOrdinal, Node> > getCrsGraph() const;
#else
    RCP< const CrsGraph<Node> > getCrsGraph() const;
#endif

    //! Number of global elements in the row map of this matrix.
    global_size_t getGlobalNumRows() const;

    //! Number of global columns in the matrix.
    global_size_t getGlobalNumCols() const;

    //! Returns the number of matrix rows owned on the calling node.
    size_t getNodeNumRows() const;

    //! Returns the number of columns connected to the locally owned rows of this matrix.
    size_t getNodeNumCols() const;

    //! Returns the global number of entries in this matrix.
    global_size_t getGlobalNumEntries() const;

    //! Returns the local number of entries in this matrix.
    size_t getNodeNumEntries() const;

    //! Returns the current number of entries on this node in the specified local row.
    size_t getNumEntriesInLocalRow(LocalOrdinal localRow) const;

    //! Returns the current number of entries in the (locally owned) global row.
    size_t getNumEntriesInGlobalRow(GlobalOrdinal globalRow) const;

    //! Returns the maximum number of entries across all rows/columns on all nodes.
    size_t getGlobalMaxNumRowEntries() const;

    //! Returns the maximum number of entries across all rows/columns on this node.
    size_t getNodeMaxNumRowEntries() const;

    //! If matrix indices are in the local range, this function returns true. Otherwise, this function returns false.
    bool isLocallyIndexed() const;

    //! If matrix indices are in the global range, this function returns true. Otherwise, this function returns false.
    bool isGloballyIndexed() const;

    //! Returns true if the matrix is in compute mode, i.e. if fillComplete() has been called.
    bool isFillComplete() const;

    //! Returns true if the matrix is in edit mode.
    bool isFillActive() const;

    //! Returns the Frobenius norm of the matrix.
    typename ScalarTraits< Scalar >::magnitudeType getFrobeniusNorm() const;

    //! Returns true if getLocalRowView() and getGlobalRowView() are valid for this class.
    bool supportsRowViews() const;

    //! Extract a list of entries in a specified local row of the matrix. Put into storage allocated by calling routine.
    void getLocalRowCopy(LocalOrdinal LocalRow, const ArrayView< LocalOrdinal > &Indices, const ArrayView< Scalar > &Values, size_t &NumEntries) const;

    //! Extract a const, non-persisting view of global indices in a specified row of the matrix.
    void getGlobalRowView(GlobalOrdinal GlobalRow, ArrayView< const GlobalOrdinal > &indices, ArrayView< const Scalar > &values) const;

    //! Extract a list of entries in a specified global row of this matrix. Put into pre-allocated storage.
    void getGlobalRowCopy(GlobalOrdinal GlobalRow, const ArrayView< GlobalOrdinal > &indices, const ArrayView< Scalar > &values, size_t &numEntries) const;

    //! Extract a const, non-persisting view of local indices in a specified row of the matrix.
    void getLocalRowView(LocalOrdinal LocalRow, ArrayView< const LocalOrdinal > &indices, ArrayView< const Scalar > &values) const;

    //! Returns true if globalConstants have been computed; false otherwise
    virtual bool haveGlobalConstants() const;


    //! @name Methods implementing Operator


    //! Computes the sparse matrix-multivector multiplication.
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    void apply(const MultiVector< Scalar, LocalOrdinal, GlobalOrdinal, Node > &X, MultiVector< Scalar, LocalOrdinal, GlobalOrdinal, Node > &Y, Teuchos::ETransp mode=Teuchos::NO_TRANS, Scalar alpha=ScalarTraits< Scalar >::one(), Scalar beta=ScalarTraits< Scalar >::zero()) const;
#else
    void apply(const MultiVector< Scalar, Node > &X, MultiVector< Scalar, Node > &Y, Teuchos::ETransp mode=Teuchos::NO_TRANS, Scalar alpha=ScalarTraits< Scalar >::one(), Scalar beta=ScalarTraits< Scalar >::zero()) const;
#endif

    //! Returns the Map associated with the domain of this operator. This will be null until fillComplete() is called.
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    const RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > >  getDomainMap() const;
#else
    const RCP< const Map<Node > >  getDomainMap() const;
#endif

    //!
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    const RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > >  getRangeMap() const;
#else
    const RCP< const Map<Node > >  getRangeMap() const;
#endif


    //! @name Overridden from Teuchos::Describable


    //! A simple one-line description of this object.
    std::string description() const;


    //! Print the object with some verbosity level to an FancyOStream object.
    void describe(Teuchos::FancyOStream &out, const Teuchos::EVerbosityLevel verbLevel=Teuchos::Describable::verbLevel_default) const;


    //! @name Overridden from Teuchos::LabeledObject
    void setObjectLabel( const std::string &objectLabel );




    //! Get a copy of the diagonal entries owned by this node, with local row idices 
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    void getLocalDiagCopy(Vector< Scalar, LocalOrdinal, GlobalOrdinal, Node > &diag) const;
#else
    void getLocalDiagCopy(Vector< Scalar, Node > &diag) const;
#endif


    //! Get a copy of the diagonal entries owned by this node, with local row indices.
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    void getLocalDiagCopy(Vector< Scalar, LocalOrdinal, GlobalOrdinal, Node > &diag, 
#else
    void getLocalDiagCopy(Vector< Scalar, Node > &diag, 
#endif
                          const Teuchos::ArrayView<const size_t> &offsets) const;


    //! Get offsets of the diagonal entries in the matrix.
    void getLocalDiagOffsets(Teuchos::ArrayRCP<size_t> &offsets) const;


#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    void replaceDiag(const Vector<Scalar, LocalOrdinal, GlobalOrdinal, Node> &diag);
#else
    void replaceDiag(const Vector<Scalar, Node> &diag);
#endif

    //! Left scale operator with given vector values
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    void leftScale (const Vector<Scalar, LocalOrdinal, GlobalOrdinal, Node>& x);
#else
    void leftScale (const Vector<Scalar, Node>& x);
#endif

    //! Right scale operator with given vector values
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    void rightScale (const Vector<Scalar, LocalOrdinal, GlobalOrdinal, Node>& x);
#else
    void rightScale (const Vector<Scalar, Node>& x);
#endif

    //! Implements DistObject interface

    //! Access function for the Tpetra::Map this DistObject was constructed with.
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    Teuchos::RCP< const Map< LocalOrdinal, GlobalOrdinal, Node > > getMap() const;
#else
    Teuchos::RCP< const Map<Node > > getMap() const;
#endif

    //! Import.
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    void doImport(const DistObject<char, LocalOrdinal, GlobalOrdinal, Node> &source,
                  const Import< LocalOrdinal, GlobalOrdinal, Node > &importer, CombineMode CM);
#else
    void doImport(const DistObject<char,Node> &source,
                  const Import<Node > &importer, CombineMode CM);
#endif

    //! Export.
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    void doExport(const DistObject<char, LocalOrdinal, GlobalOrdinal, Node> &dest,
                  const Import< LocalOrdinal, GlobalOrdinal, Node >& importer, CombineMode CM);
#else
    void doExport(const DistObject<char,Node> &dest,
                  const Import<Node >& importer, CombineMode CM);
#endif

    //! Import (using an Exporter).
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    void doImport(const DistObject<char, LocalOrdinal, GlobalOrdinal, Node> &source,
                  const Export< LocalOrdinal, GlobalOrdinal, Node >& exporter, CombineMode CM);    
#else
    void doImport(const DistObject<char,Node> &source,
                  const Export<Node >& exporter, CombineMode CM);    
#endif

    //! Export (using an Importer).
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    void doExport(const DistObject<char, LocalOrdinal, GlobalOrdinal, Node> &dest,
                  const Export< LocalOrdinal, GlobalOrdinal, Node >& exporter, CombineMode CM);   
#else
    void doExport(const DistObject<char,Node> &dest,
                  const Export<Node >& exporter, CombineMode CM);   
#endif

#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    void removeEmptyProcessesInPlace (const Teuchos::RCP<const Map<LocalOrdinal, GlobalOrdinal, Node> >& newMap);    
#else
    void removeEmptyProcessesInPlace (const Teuchos::RCP<const Map<Node> >& newMap);    
#endif



    //! @name Xpetra specific

    //! Does this have an underlying matrix
    bool hasMatrix() const;

    //! TpetraBlockCrsMatrix constructor to wrap a Tpetra::BlockCrsMatrix object
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    TpetraBlockCrsMatrix(const Teuchos::RCP<Tpetra::BlockCrsMatrix<Scalar, LocalOrdinal, GlobalOrdinal, Node> > &mtx);
#else
    TpetraBlockCrsMatrix(const Teuchos::RCP<Tpetra::BlockCrsMatrix<Scalar, Node> > &mtx);
#endif

    //! Get the underlying Tpetra matrix
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    RCP<const Tpetra::BlockCrsMatrix<Scalar, LocalOrdinal, GlobalOrdinal, Node> > getTpetra_BlockCrsMatrix() const;
#else
    RCP<const Tpetra::BlockCrsMatrix<Scalar, Node> > getTpetra_BlockCrsMatrix() const;
#endif

    //! Get the underlying Tpetra matrix
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    RCP<Tpetra::BlockCrsMatrix<Scalar, LocalOrdinal, GlobalOrdinal, Node> > getTpetra_BlockCrsMatrixNonConst() const;
#else
    RCP<Tpetra::BlockCrsMatrix<Scalar, Node> > getTpetra_BlockCrsMatrixNonConst() const;
#endif

#ifdef HAVE_XPETRA_KOKKOS_REFACTOR
#ifdef HAVE_XPETRA_TPETRA
    //using local_matrix_type = typename Xpetra::CrsMatrix<Scalar, LocalOrdinal, GlobalOrdinal, Node>::local_matrix_type;
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    using local_matrix_type = typename CrsMatrix<Scalar, LocalOrdinal, GlobalOrdinal, Node>::local_matrix_type;
#else
    using local_matrix_type = typename CrsMatrix<Scalar, Node>::local_matrix_type;
#endif

    local_matrix_type getLocalMatrix () const;

    void setAllValues (const typename local_matrix_type::row_map_type& ptr,
                       const typename local_matrix_type::StaticCrsGraphType::entries_type::non_const_type& ind,
                       const typename local_matrix_type::values_type& val);    
#endif  // HAVE_XPETRA_TPETRA
#endif  // HAVE_XPETRA_KOKKOS_REFACTOR

    //! Compute a residual R = B - (*this) * X
#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    void residual(const MultiVector< Scalar, LocalOrdinal, GlobalOrdinal, Node > & X,
                  const MultiVector< Scalar, LocalOrdinal, GlobalOrdinal, Node > & B,
                  MultiVector< Scalar, LocalOrdinal, GlobalOrdinal, Node > & R) const {
#else
    void residual(const MultiVector< Scalar, Node > & X,
                  const MultiVector< Scalar, Node > & B,
                  MultiVector< Scalar, Node > & R) const {
#endif
      using STS = Teuchos::ScalarTraits<Scalar>;
      R.update(STS::one(),B,STS::zero());
      this->apply (X, R, Teuchos::NO_TRANS, -STS::one(), STS::one());   
    }      
    



  private:

#ifdef TPETRA_ENABLE_TEMPLATE_ORDINALS
    RCP< Tpetra::BlockCrsMatrix<Scalar, LocalOrdinal, GlobalOrdinal, Node> > mtx_;
#else
    RCP< Tpetra::BlockCrsMatrix<Scalar, Node> > mtx_;
#endif

    }; // TpetraBlockCrsMatrix class

} // Xpetra namespace


#endif // XPETRA_TPETRABLOCKCRSMATRIX_DECL_HPP


